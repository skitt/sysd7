head	1.1;
access;
symbols;
locks
	skk:1.1; strict;
comment	@# @;


1.1
date	98.05.01.10.57.57;	author skk;	state Exp;
branches;
next	;


desc
@Software documentation.
@


1.1
log
@Initial revision
@
text
@#This file was created by <skk> Fri May  1 11:56:14 1998
#LyX 0.12 (C) 1995-1998 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass article
\language default
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Section

The software
\layout Standard

The software is composed of four components running on two platforms: a
 daemon and GUI running on the client (Linux for the prototype), and a program
 loader and general control software running on the board (the Motorola
 IDP).
\layout Subsection

The Linux software
\layout Subsection

The Motorola software
\layout Subsubsection

The initial program loader
\layout Standard

This piece of software sits in a tight polling loop waiting for the client
 to activate; it then proceeds to download the board software into memory
 and transfer control to it.
 It is burnt into a PROM and automatically loaded when the board is switched
 on.
\layout Subsubsection

The board control software
\layout Standard

This implements the board-side of the door-entry system in software.
 It interacts with the hardware on the boards, and communicates with the
 client.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 595 537
file board_flowchart.eps
width 3 100
angle 270
flags 9

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{Motorola state diagram}

\end_inset 

The Motorola software state diagram
\end_float 
The Motorola software state diagram (figure 
\begin_inset LatexCommand \ref{Motorola state diagram}

\end_inset 

, page 
\begin_inset LatexCommand \pageref{Motorola state diagram}

\end_inset 

) gives an overview of the operation of this software.
\layout Paragraph

State 1 --- Initialisation
\layout Subparagraph

Functional description
\layout Standard

This state will:
\layout Itemize

initialise the serial transport subsytem;
\layout Itemize

retrieve configuration information from the client;
\layout Itemize

retrieve the user database from the client;
\layout Itemize

initialise the hardware subsystems using their initialisation functions.
\layout Subparagraph

Transitions
\layout Standard

State 2 will be entered upon completion of the above.
\layout Subparagraph

Communications to the client
\layout Standard

Configuration information and the database are requested from the client's
 control module using the 
\family typewriter 
CONTROL
\family default 
 tag (more specifically with the 
\family typewriter 
REQUEST_CFG
\family default 
 and 
\family typewriter 
REQUEST_DB
\family default 
 sub-tags).
\layout Subparagraph

Communications from the client
\layout Standard

The above information is transferred using 
\family typewriter 
CONTROL
\family default 
 tags (
\family typewriter 
DATA_CFG
\family default 
 and 
\family typewriter 
DATA_DB
\family default 
).
\layout Paragraph

State 2 --- Normal operation
\layout Subparagraph

Functional description
\layout Standard

This state performs four functions: 
\layout Itemize

it polls the video camera, it captures an image and uses a combination of
 frame-difference and RLE encoding to compress the image before sending
 it via serial to the Linux client machine;
\layout Itemize

it polls the Dallas Ring to detect whether a ring is present in the detector;
\layout Itemize

it checks for a signal from the client;
\layout Itemize

it polls the buzzer.
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 2:
\layout Itemize

state 1 --- a signal is received from the client instructing the board to
 enter the initialisation state;
\layout Itemize

state 3 --- the buzzer is pressed;
\layout Itemize

state 5 --- a Dallas ring is detected.
\layout Standard

Otherwise state 2 will loop.
\layout Subparagraph

Communications to the client
\layout Standard

Compressed frames from the video camera are sent to the video module using
 the 
\family typewriter 
VIDEO
\family default 
 tag.
\layout Subparagraph

Communications from the client
\layout Standard

The client can request a transition to state 1 using the 
\family typewriter 
CONTROL
\family default 
 tag (
\family typewriter 
RESET
\family default 
 sub-tag).
\layout Paragraph

State 3 --- Wait for PC user to respond
\layout Subparagraph

Functional description
\layout Standard

This state informs the client that the buzzer has been pressed.
 It then continues to transmit video until it times out (according to a
 preset timeout value) or the client acknowledges the buzzer.
 
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 3:
\layout Itemize

state 2 --- the timeout expires (
\emph on 
i.e.

\emph default 
 the client fails to respond);
\layout Itemize

state 4 --- the client responds to the buzzer signal.
\layout Standard

Otherwise state 3 will loop.
\layout Subparagraph

Communications to the client
\layout Standard

A 
\family typewriter 
CONTROL
\family default 
 message (
\family typewriter 
BUZZER
\family default 
 sub-tag) informs the client that the buzzer has been pressed.
\layout Subparagraph

Communications from the client
\layout Standard

A 
\family typewriter 
CONTROL
\family default 
 message (
\family typewriter 
BUZZER_ACK
\family default 
 sub-tag) acknowledges receipt of the BUZZER signal.
\layout Paragraph

State 4 --- Conversation with the visitor
\layout Subparagraph

Functional description
\layout Standard

State 4 is the state which handles the audio when there is someone at the
 door.
 It samples from the microphone at the door, compresses the data and sends
 it to the PC.
 It also takes compressed samples from the PC and plays them via the speaker
 at the door.
 Additionally, the system must check for input from the PC user, so that
 they can choose to grab some more video, open the door, or refuse entry.
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 4:
\layout Itemize

state 2 --- the client refuses entry, or the timeout expires;
\layout Itemize

state 8 --- the client authorises entry.
\layout Standard

Otherwise state 4 will loop.
\layout Subparagraph

Communications to the client
\layout Standard


\family typewriter 
AUDIO
\family default 
 messages transmit audio to the audio module; 
\family typewriter 
VIDEO
\family default 
 messages can also be used to transmit video.
\layout Subparagraph

Communications from the client
\layout Standard


\family typewriter 
AUDIO
\family default 
 messages transmit audio; 
\family typewriter 
CONTROL
\family default 
 messages indicate the user's response (
\family typewriter 
AUTHORISE
\family default 
 or 
\family typewriter 
REJECT
\family default 
) or a request for more video (
\family typewriter 
GRABFRAME
\family default 
).
\layout Paragraph

State 5 --- Read the Dallas ring
\layout Subparagraph

Functional description
\layout Standard

This state is entered when a Dallas ring is present in the reader; it reads
 the 64 bits of information off the ring and stores them in a buffer for
 later use.
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 5:
\layout Itemize

state 6 --- the information was successfully read;
\layout Itemize

state 2 --- an error occurred during the read.
\layout Subparagraph

Communications to the client
\layout Standard

A 
\family typewriter 
CONTROL
\family default 
 message (
\family typewriter 
USERID
\family default 
) will be sent to allow the auto alert window to display information about
 the visitor.
\layout Paragraph

State 6 --- Retrieve PIN
\layout Subparagraph

Functional description
\layout Standard

This state attempts to read a PIN from the keypad, by repeatedly polling
 it until either a full PIN is read, or the timeout expires.
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 6:
\layout Itemize

state 7 --- a PIN is successfully read;
\layout Itemize

state 2 --- the timeout expires.
\layout Paragraph

State 7 --- Verify user ID and PIN
\layout Subparagraph

Functional description
\layout Standard

This state verifies the authenticity of the user wishing to gain entry.
 It looks at UID and PIN read by previous states and stored in memory, compares
 these with entries in the database, stored in RAM, and decides whether
 to authorise or reject the visitor.
 The outcome is sent to the client for logging.
\layout Subparagraph

Transitions
\layout Standard

The following states can be entered from state 7:
\layout Itemize

state 8 --- the user ID is in the database and the PIN is correct;
\layout Itemize

state 2 --- the user ID isn't in the database, or the PIN is incorrect.
\layout Subparagraph

Communications to the client
\layout Standard

A 
\family typewriter 
CONTROL
\family default 
 message (
\family typewriter 
LOG_ENTRY
\family default 
) informs the client of the outcome of the verification.
\layout Paragraph

State 8 --- Open door
\layout Subparagraph

Functional description
\layout Standard

This state opens the door.
\layout Subparagraph

Transitions
\layout Standard

State 2 will be entered once the door is opened.
\layout Subparagraph

Communications to the client
\layout Standard

A 
\family typewriter 
CONTROL
\family default 
 message (
\family typewriter 
DOOR_OPEN
\family default 
) indicates the door was opened.
\layout Subsubsection

The secondary board support software
\layout Standard

These functions provide the interface to the secondary board.
\layout Paragraph

The Dallas ring reader
\layout Standard

Two functions and a structure are provided to access information on the
 ring.
 The structure is defined as follows:
\layout LyX-Code

typedef struct
\layout LyX-Code

{
\layout LyX-Code


\protected_separator 
 unsigned char product;
\layout LyX-Code


\protected_separator 
 unsigned char id [6];
\layout LyX-Code


\protected_separator 
 unsigned char crc;
\layout LyX-Code

} ringinfo;
\layout Standard

The functions are:
\layout Itemize


\family typewriter 
int checkring (void)
\family default 
 --- returns 1 if a ring is present, 0 otherwise;
\layout Itemize


\family typewriter 
ringinfo * getringinfo (void)
\family default 
 --- retrieves the ring's information and places it in a structure.
\layout Paragraph

The keypad
\layout Standard

Two functions are provided:
\layout Itemize


\family typewriter 
int checkkeypad (void)
\family default 
 --- returns 1 if a key is being pressed, 0 otherwise;
\layout Itemize


\family typewriter 
unsigned char getkeypad (void)
\family default 
 --- returns the value of the key being pressed; this is an integer between
 0 and 12, 0--9 corresponding to the digits 0--9, 
\family typewriter 
KP_STAR
\family default 
 to the star symbol, 
\family typewriter 
KP_HASH
\family default 
 to the hash symbol, and 
\family typewriter 
KP_DOORBELL
\family default 
 to the doorbell.
\layout Standard

Note that initially one of the auxiliary keys (star or hash) may be used
 instead of an actual doorbell.
\layout Paragraph

The ADC and DAC
\layout Standard

Two functions are provided:
\layout Itemize


\family typewriter 
unsigned char getsample (void)
\family default 
 --- returns the current sample from the ADC;
\layout Itemize


\family typewriter 
void setsample (unsigned char)
\family default 
 --- sends a sample to the DAC.
\layout Paragraph

The NVRAM and RTC
\layout Standard

The following structure stores time information:
\layout LyX-Code

typedef struct
\layout LyX-Code

{
\layout LyX-Code


\protected_separator 
 unsigned char seconds;
\layout LyX-Code


\protected_separator 
 unsigned char minutes;
\layout LyX-Code


\protected_separator 
 unsigned char hours;
\layout LyX-Code


\protected_separator 
 unsigned char day;
\layout LyX-Code


\protected_separator 
 unsigned char date;
\layout LyX-Code


\protected_separator 
 unsigned char month;
\layout LyX-Code


\protected_separator 
 unsigned char year;
\layout LyX-Code

} rtctime;
\layout Standard

Their precise meaning (with regard for example to the 
\family typewriter 
year
\family default 
 field) is up to the programmer, but the values stored in the RTC will be
 updated automatically.
\layout Standard

The following functions access the RTC:
\layout Itemize


\family typewriter 
rtctime getrtctime (void)
\family default 
 --- retrieves the current time from the RTC;
\layout Itemize


\family typewriter 
void setrtctime (rtctime)
\family default 
 --- stores new data in the RTC.
\layout Standard

The programmer can use 760 bytes in NVRAM, and these are accessed using
 the following functions:
\layout Itemize


\family typewriter 
unsigned char * getnvram (int, int)
\family default 
 --- returns the data stored in the given range;
\layout Itemize


\family typewriter 
void setnvram (unsigned char *, int, int)
\family default 
 --- stores the data in the given range.
\layout Standard

The range is specified as going from the first integer argument to the second,
 inclusive; so for example 
\family typewriter 
setnvram (&data, 0, 759)
\family default 
 would fill the whole NVRAM.
\layout Paragraph

The LED display
\layout Standard

The 7-segment LED display on the IDP can be accessed using the 
\family typewriter 
void leddisplay (int)
\family default 
 function, which display the given hexadecimal digit or blanks the LED if
 -1 is given as an argument.
\layout Paragraph

The door
\layout Standard

The door lock's status can be verified and changed using:
\layout Itemize


\family typewriter 
int getdoorstatus (void)
\family default 
 --- returns 0 if the door is closed, 1 if it's open;
\layout Itemize


\family typewriter 
int opendoor (void)
\family default 
 --- opens the door, returning 0 in case of success, -1 in case of failure.
\layout Paragraph

The jiffies counter
\layout Standard

A global variable, defined as
\layout LyX-Code

unsigned int jiffies
\layout Standard

is updated regularly (the exact interval to be used hasn't yet been determined),
 using the UART's counter.
 This can be used as a precise measure of elapsed time.
\layout Subsection

The serial subsystem
\layout Subsubsection

External interface
\layout Standard

The serial interface is designed to be the same on both the Linux and Motorola
 sides of the system.
 The subsystem transmits packets of data between the two platforms; these
 can be of any length.
\layout Standard

A data packet, as supplied to and by the serial functions, has the following
 structure:
\layout LyX-Code

typedef struct
\layout LyX-Code

{
\layout LyX-Code


\protected_separator 
 unsigned char datatype;
\layout LyX-Code


\protected_separator 
 unsigned int length;
\layout LyX-Code


\protected_separator 
 unsigned char * data;
\layout LyX-Code

} packet;
\layout Standard

The datatype is used by handler functions at the receiving end; the serial
 subsystem maintains a programmer-controlled list of handlers, and upon
 receiving a complete packet, calls the relevant handler.
 Two datatypes are predefined by the serial subsystem though: 0 corresponds
 to the default handler, used when no handler is defined for the datatype
 of a packet, and 1 is the PING packet, used to check whether the system
 is alive.
 The first of these can be redefined by the programmer.
\layout Standard

The data pointed to is copied immediately, so that the supplying function
 needn't keep a copy.
 Likewise, receiving functions should copy the data immediately...
\layout Standard

The functions defined are as follows:
\layout Itemize


\family typewriter 
int serialinit (void)
\family default 
 --- initialises the serial subsystem;
\layout Itemize


\family typewriter 
int serialclose (void)
\family default 
 --- closes the serial subsystem;
\layout Itemize


\family typewriter 
int senddata (packet *)
\family default 
 --- queues a packet (pointed to by the argument);
\layout Itemize


\family typewriter 
int registerhandler (unsigned char, packethandler)
\family default 
 --- registers a function which will be called with any incoming packet
 containing data of the type given in the first argument;
\layout Itemize


\family typewriter 
int unregisterhandler (unsigned char)
\family default 
 --- removes any handler previously defined for the given data type; if
 the default data handler is removed, the system reverts to the supplied
 default handler which discards any incoming packets apart from the PING
 packet;
\layout Itemize


\family typewriter 
int ping (void)
\family default 
 --- checks to see whether the opposite member of the link is still responding.
\layout Subsubsection

Implementation
\layout Standard

The implementation of the serial subsystem on both platforms is event-based.
 Queues of incoming and outgoing data are maintained, and whenever the UARTs
 are ready to send or receive data is fed to (if there is any outgoing data)
 or read from them.
\layout Paragraph

Common sections
\layout Standard

The event-handling function is 
\family typewriter 
void serialevent (void)
\family default 
, which is called whenever the UART signals it's ready to transmit or receive;
 it then determines which direction data is needed for, and transfers it
 to and from the queues.
\layout Standard

A 32768-byte buffer stores the incoming data until a complete packet is
 received, as determined by the length descriptor.
 Whenever a complete packet is formed, the corresponding handler is called,
 and the buffer can then be re-used.
\layout Standard

Output data is stored in a circular, 65536-byte buffer as a stream of raw
 bytes which need sent out.
 When a packet is received, its contents are simply added to the buffer.
\layout Paragraph

Linux specifics
\layout Standard

The Linux code communicates with the serial port by using the 
\family typewriter 
ttyS0
\family default 
 terminal device.
 Events are provided using the 
\family typewriter 
IO
\family default 
 signal; a call to 
\family typewriter 
select(2)
\family default 
 is then used to determine whether the UART is ready to transmit or receive.
 
\family typewriter 
serialevent
\family default 
 is called by 
\family typewriter 
void iosighandler (int)
\family default 
, which is registered as the 
\family typewriter 
SIGIO
\family default 
 handler.
 
\family typewriter 
termios
\family default 
 functions are used to set the communications port up.
\layout Paragraph

Motorola specifics
\layout Standard

On the Motorola, access to the UART is done directly since the MC68681 is
 memory-mapped and there is no operating system.
 The PIT (MC68230) is also used since the UART's IRQ line goes through it.
 The assembler function 
\family typewriter 
serialirq
\family default 
 is set up to handle the UART IRQ exception; it simply calls 
\family typewriter 
serialevent
\family default 
.
\the_end
@
