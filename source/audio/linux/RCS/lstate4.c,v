head	1.4;
access;
symbols;
locks
	dwi:1.4; strict;
comment	@ * @;


1.4
date	98.05.12.11.38.34;	author dwi;	state Exp;
branches;
next	1.3;

1.3
date	98.05.11.08.20.34;	author dwi;	state Exp;
branches;
next	1.2;

1.2
date	98.05.11.08.16.05;	author dwi;	state Exp;
branches;
next	1.1;

1.1
date	98.05.11.08.03.35;	author dwi;	state Exp;
branches;
next	;


desc
@This is the code that implements audio capture/compression/transmission on
the linux end.
@


1.4
log
@Right, now this works to Rx serial and play it on the PC.
@
text
@/*  Linux audio system.
  $Id:
  $Log
 */
#include <sys/ioctl.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/soundcard.h>
#include <audio.h>
#include <stdio.h>
#include <stdlib.h>
#include <serial.h>
#include <data.h>
#include <control.h>

/*****
  Bizarrely enough I have these the wrong way round, that is PLAY... pertains to
  the size of the stuff sampled by the PC, and SAMPLE... is stuff received via
  the serial to be played on the PC.
  */
#define PLAY_BUF_SIZE 4096
#define SAMPLE_BUF_SIZE 1024
#define PLAY_FRAG 12
#define SAMPLE_FRAG 10


/*
  Uncomment this line to make the software automatically alter the mixer settings.
#define MIXER_TWEAKS 
*/



int audio_fd,len;
int mixer_fd;
unsigned char TransitionTo=0;



/**********
   Buffers for Tx Data 
*/
unsigned char audioIn_Buf[SAMPLE_BUF_SIZE];
unsigned char serialOut_Buf[SAMPLE_BUF_SIZE];
int Tx_Data_count=0;


/***********
   Buffers for Rx Data 
*/
unsigned char audioOut_Buf[PLAY_BUF_SIZE];
unsigned char serialIn_Buf[PLAY_BUF_SIZE/2];
int Rx_Data_count=0;



/***************************************
*  Soundcard initialisation routine.   *
****************************************/

void init_audio (int Mode)
{
  int mono;
  /* Open the soundcard on /dev/dsp */
  if ((audio_fd = open ("/dev/dsp", Mode, 0)) == -1) {
    fprintf (stderr, "error [(Duncan) lstate4.c/init_soundcard] : couldn't open /dev/dsp");
    /*    exit (EXIT_FAILURE);*/
  }
  

  /*
    Set the buffered fragment size so that there is less delay.
  */
  if (Mode==O_RDONLY)
    mono=0x7fff0000&SAMPLE_FRAG;
  else
    mono=0x7FFF000C;
    /*mono=0x7fff0000&PLAY_FRAG;*/
  if (ioctl(audio_fd, SNDCTL_DSP_SETFRAGMENT, &mono) == -1)
    fprintf(stderr,"Arsebandits!  The git doesn't wan't to play!\n");
  fprintf(stderr,"Returned : %d\n",mono);

  
  /*
    Set to mono operation.
  */
  mono=0;
  if (ioctl (audio_fd, SNDCTL_DSP_STEREO, &mono) == -1) {
    fprintf (stderr, "error [(Duncan) lstate4.c/init_soundcard] : problem setting mono operation?!?!");
  }

  /*
    set it to 8-bit unsigned sampling.
  */
  mono = AFMT_U8;
  if (ioctl (audio_fd, SNDCTL_DSP_SETFMT, &mono) == -1) {
    fprintf(stderr,"error [(Duncan) lstate4.c/init_soundcard] : problem setting unsigned 8-bit mode.");
  }
  
  /*
    set it to 8kHz sampling rate.
  */
  mono = 6250;
  mono = 8000;
  if (ioctl (audio_fd, SNDCTL_DSP_SPEED, &mono) == -1) {
    fprintf(stderr,"error [(Duncan) lstate4.c/init_soundcard] : problem setting sampling rate.");
  }

  /*
    Initialise the audio subsystem...
  */
  serialinit();
  initCompr();
  initDecompr();
  TransitionTo=0;
}


/*
  It does exactly what it says on the tin!
*/
void close_audio(void)
{
  close (audio_fd);
  serialclose();
}


/*************************************************************************************
 Mixer Functions .......
*************************************************************************************/
void init_mixer(void)
{
  int mixer;
  /* Open the soundcard on /dev/mixer */
  if ((mixer_fd = open ("/dev/mixer", O_WRONLY, 0)) == -1) {
    fprintf (stderr, "error [(Duncan) lstate4.c/init_mixer] : couldn't open /dev/mixer");
    exit (EXIT_FAILURE);
  }
}

void mixer_volume(int volume) 
{
  /*  Set to mono operation. */
  if (ioctl (mixer_fd, SOUND_MIXER_VOLUME, &volume) == -1) {
    fprintf (stderr, "error [(Duncan) lstate4.c/mixer_volume] : problem setting volume");
  }
}

void mixer_mic_level(int level)
{
  if (ioctl (mixer_fd, SOUND_MIXER_MIC, &level) == -1) {
    fprintf (stderr, "error [(Duncan) lstate4.c/mixer_mic_level] : problem setting level");
  }
}

void close_mixer(void)
{
  close (mixer_fd);
}


/*
  Audio Tx routines...
*/

void getsample (unsigned char *buffer)
{
  int tmp=SAMPLE_BUF_SIZE;
  if (((len = read (audio_fd, buffer, tmp)) == -1)) {
    fprintf(stderr,"error [(Duncan) lstate4.c/get_sample] : Sample failed!\n");
  }
  /*  for (tmp=0;tmp<SAMPLE_BUF_SIZE;tmp++)
    *(buffer++)=(unsigned char)getchar();*/
}

void compress_sample(unsigned char *InBuf, unsigned char *OutBuf)
{
  int j=SAMPLE_BUF_SIZE;
  Tx_Data_count=0;
  while (j--) {
    if ((*(OutBuf++)=compress(*(InBuf++),*(InBuf++))) == 0xFF) {
      Tx_Data_count++;
      *(OutBuf++)=0xFF;
    }
    Tx_Data_count++;
  }
}

void sendSample(void)
{
  int i;

  getsample(audioIn_Buf);
  compress_sample(audioIn_Buf,serialOut_Buf);
  for (i=0;i<Tx_Data_count;i++)
        serialtransmit(serialOut_Buf[i]);
  /*    putchar (serialOut_Buf[i]);*/
}



/*
  Audio Rx routines...
*/
/* Play a sample. */
void setsample(unsigned char *buffer)
{
  int i;
  /*for (i=0;i<PLAY_BUF_SIZE;i++) {
    Rx_Data_count++;
    putchar(*(buffer++));
  }*/
 
  if ((len = write (audio_fd, buffer, PLAY_BUF_SIZE)) == -1) {
    fprintf(stderr,"error [(Duncan) lstate4.c/set_sample] : Sample failed!\n");
  }
}

/* Decompress a sample. */
void decompress_sample(unsigned char *InBuf, unsigned char *OutBuf)
{
  int j=PLAY_BUF_SIZE/2;
  while (j--) {
    decompress(*(InBuf++),OutBuf);
    OutBuf+=2;
  }
}

/* ... */
void receiveSample(void)
{
  int i;
  /* We know that there will be precisely half as many compressed samples as there are
     actual data samples.  Since there is no control info being sent to the PC. */
  for (i=0;i<PLAY_BUF_SIZE/2;i++)
    serialIn_Buf[i]=serialreceive();
  decompress_sample(serialIn_Buf,audioOut_Buf);
  setsample(audioOut_Buf);
}


/**************************************************************************************
* Right... that should take care of most of it, the next bit is mostly guesswork.  That
* is to say that it is correct as far as it goes (I think!) but I'm guessing as to how
* it's going to tie in with the rest of the system.
***************************************************************************************
  In fact I think these are utter tosh.  The l_stateN()s won't happen along with the
  GUI, consequently they will have to be in a separate process, but then the GUI cannot
  call audio_MakeTransition() in order to stop the audio...  AAArrrrrgggghhhH!!!!
**************************************************************************************/


void l_state4(void)
{
  init_audio(O_RDONLY);
#ifdef MIXER_TWEAKS
  mixer_volume(0);
  mixer_mic_level(255);
#endif
  serialreceive();
fprintf(stderr,"Synched...\n");fflush (stderr);
  while (!TransitionTo)
    sendSample();
  serialtransmit(0xFF);
  serialtransmit(TransitionTo);
  serialreceive();
  close_audio();
}

void l_state10(void)
{
  init_audio(O_WRONLY);
#ifdef MIXER_TWEAKS
  mixer_volume(255);
  mixer_mic_level(0);
#endif
  serialreceive();
  fprintf (stderr, "Let's go..\n");
  while (!TransitionTo)
    receiveSample();
  serialtransmit(TransitionTo);
  serialreceive();
  close_audio();
}

void audio_MakeTransition(unsigned char State)
{
  TransitionTo=State;
}


void main (void)
{
#ifdef MIXER_TWEAKS
  init_mixer();
#endif
  l_state10();
#ifdef MIXER_TWEAKS
  close_mixer();
#endif
}
@


1.3
log
@Changed a damn-fool thing, I was calling the wrong thing in l_state10().
Instead of receivesample(), I was using ... guess what ...?!?
@
text
@d16 11
a26 1
#define SAMPLE_BUF_SIZE 64
d32 2
d38 5
a42 1
/* Buffers for Tx Data */
d44 1
a44 1
unsigned char serialOutBuf[SAMPLE_BUF_SIZE];
d48 5
a52 3
/* Buffers for Rx Data */
  unsigned char audioOut_Buf[SAMPLE_BUF_SIZE];
  unsigned char serialIn_Buf[SAMPLE_BUF_SIZE];
d55 5
a59 3
/*
  Soundcard initialisation routine.
*/
d67 1
a67 1
    exit (EXIT_FAILURE);
d69 1
d71 16
a86 1
  /*  Set to mono operation. */
d92 3
a94 1
  /* set it to 8-bit unsigned sampling. */
d100 4
a103 1
  /* set it to 8kHz sampling rate. */
d169 2
a170 1
  if ((len = read (audio_fd, buffer, SAMPLE_BUF_SIZE)) == -1) {
d173 2
d179 1
a179 1
  int j=SAMPLE_BUF_SIZE/2;
d195 1
a195 1
  compress_sample(audioIn_Buf,serialOutBuf);
d197 2
a198 1
    serialtransmit(serialOut_Buf[i]);
d209 7
a215 1
  if ((len = write (audio_fd, buffer, SAMPLE_BUF_SIZE)) == -1) {
d217 1
a217 1
  }  
d223 1
a223 1
  int j=SAMPLE_BUF_SIZE/2;
d225 2
a226 2
    decompress(*(InBuf++),*(OutBuf++));
    OutBuf++;
d234 5
a238 4

  for (i=0;i<SAMPLE_BUF_SIZE/2;i++)
    serialOut_Buf[i]=serialreceive();
  decompress_sample(serialIn_Buf,audioOutBuf);
d262 1
d279 1
@


1.2
log
@Set up a simple main function to try to receive data from the motorola.
@
text
@d227 1
a227 1
    sendSample();
@


1.1
log
@Initial revision
@
text
@d241 3
d245 3
@
