head	1.9;
access;
symbols;
locks
	skk:1.9; strict;
comment	@ * @;


1.9
date	98.05.09.13.08.36;	author dwi;	state Exp;
branches;
next	1.8;

1.8
date	98.05.09.13.07.05;	author dwi;	state Exp;
branches;
next	1.7;

1.7
date	98.05.09.12.52.16;	author dwi;	state Exp;
branches;
next	1.6;

1.6
date	98.05.08.16.36.55;	author dwi;	state Exp;
branches;
next	1.5;

1.5
date	98.05.08.16.23.47;	author dwi;	state Exp;
branches;
next	1.4;

1.4
date	98.05.07.19.32.04;	author dwi;	state Exp;
branches;
next	1.3;

1.3
date	98.05.07.19.28.57;	author dwi;	state Exp;
branches;
next	1.2;

1.2
date	98.05.07.11.42.49;	author dwi;	state Exp;
branches;
next	1.1;

1.1
date	98.05.05.15.36.48;	author iic;	state Exp;
branches;
next	;


desc
@Audio compression / decompression routines
@


1.9
log
@Fixed a typo.  Line 141 changed */ -> /*  Bloody daft!
@
text
@/*#include <stdio.h>
#include <stdlib.h>*/
#include <audio.h>

/*
.---------------------------------------------------------------------------.
|  This is a lookup table of coded deltas.                                  |
|  i.e. nib_lookup[sample_delta] gives you the relevant 4-bit encoding.     |
|---------------------------------------------------------------------------|*/
unsigned char nib_lookup[]={
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 7,
  7, 8, 9, 9, 10,10,10,11,11,11,11,11,11,12,12,12,
  12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,
  13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
  13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
  14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
  14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
  15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
  15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15};
/*                                                                          |
`---------------------------------------------------------------------------'*/



/*
.---------------------------------------------------------------------------.
|  This is the decoding table.  It performs the inverse mapping.            |
|  ie unnib_lookup[4_bit_code] returns the estimated delta for the sample.  |
|---------------------------------------------------------------------------|*/
char unnib_lookup[]={-128,-64,-32,-16,-8,-4,-2,-1,1,2,4,8,16,32,64,127};
/*                                                                          |
`---------------------------------------------------------------------------'*/


/***************************************************************************
 * Previous sample values for encoding and decoding respectively           *
 *                                                                         */
unsigned char prev_val_c, prev_val_d;
/***************************************************************************/


/* 
   Initialise compression
*/
void initCompr()
{
  prev_val_c=128;
}

/*
  Initialise decompression
*/

void initDecompr()
{
  prev_val_d=128;
}

/*
  Takes a byte and compresses it, which is returned
*/

unsigned char compressI(unsigned char sample)
{
  unsigned char ret;
  ret=nib_lookup[128+sample-prev_val_c];
  prev_val_c+=unnib_lookup[ret];
  /*  fprintf(stderr,"%d>%d>%d\n",sample,ret,prev_val_c);*/
  return ret;
}

/* Takes two unsigned 8-bit samples and compresses them into 1 byte,
   which is returned
   */

unsigned char compress(unsigned char sample1, unsigned char sample2)
{
  unsigned char t1,t2;
  t1=compressI(sample1);
  t2=(compressI(sample2)<<4)|t1;
  return t2;
}
/*
unsigned char compress(unsigned char *src)
{
  return compressI(src[0])|(compressI(src[1])<<4);
}
*/

/* Takes a byte s and returns it's decompressed version */

unsigned char decompressI(unsigned char s)
{
  prev_val_d+=unnib_lookup[s];
  return prev_val_d;
}

/* Takes a byte s and a pointer to a two byte buffer to which
   s will be decompressed */

void decompress(unsigned char s, unsigned char *dst)
{
  dst[0]=decompressI(s & 0x0F);
  dst[1]=decompressI(((s & 0xF0)>>4)&0x0F);
}

/* Test code 

void main(void)
{
  int i;
  unsigned char testin[] = {120,100,60,30,120,200,220,223};
  unsigned char testout[8];
  unsigned char compressed[4];
  initDecompr();
  printf("Compressed: ");
  for(i=0;i<4;i++)
    {
      compressed[i]=compress(testin[i*2],testin[i*2+1]);
      printf("%2.2X ",compressed[i]);
    }
  printf("\nUncompressed: ");
  for(i=0;i<4;i++)
    {
      decompress(compressed[i],testout+i*2);
    }
  for(i=0;i<8;i++)
    {
      printf("%d ",testout[i]);
    }
  printf("\n");
}
/*
*/
@


1.8
log
@Taken out the main function so's It'll compile!#
@
text
@d140 1
a140 1
*/
@


1.7
log
@Think that I may have found the bug.  Have changed the initial conditions to be that the previous sample is 128.  I think that having it at 0 was causing
the problem.
@
text
@d114 1
a114 1
/* Test code */
d140 1
a140 1
/*
@


1.6
log
@Had another go, thought that it might be the decompress() fn.  Something's wrong!!!
@
text
@d11 16
a26 11
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,
  4,4,4,4,5,5,5,6,7,7,8,9,9,10,10,10,11,11,11,11,11,11,12,12,12,
  12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,
  13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,
  14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
  14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,
  15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
  15,15,15,15,15,15,15};
d54 1
a54 1
  prev_val_c=0;
d63 1
a63 1
  prev_val_d=0;
d110 2
a111 3
  unsigned char t=s;
  dst[0]=decompressI((t & 0xF0) >> 4);
  dst[1]=decompressI(s & 0x0F);
d114 1
a114 1
/* Test code
d119 1
a119 1
  unsigned char testin[] = {120,100,60,30,-20,-100,-120,-123};
d123 1
a123 1
  printf("Compressed:");
d127 1
a127 1
      printf("%d ",compressed[i]);
d129 1
a129 1
  printf("Uncompressed:");
d140 1
a140 1

@


1.5
log
@Have noticed a bug with Ian's code that puts two compressed samples together
attempted to remedy this in compress().
@
text
@d105 3
a107 2
  dst[0]=decompressI(s & 0x0F);
  dst[1]=decompressI((s & 0xF0) >> 4);
@


1.4
log
@Decided that the 2-byte array idea was bollocks and have put it back to what
it was.
@
text
@d80 4
a83 1
  return compressI(sample1)|(compressI(sample2)<<4);
@


1.3
log
@Ian had some stdlib/stdio stuff in which I've commented out so that it'll
work on the motorola.
@
text
@d76 1
a76 1

d82 1
a82 1
*/
d87 1
a87 1

@


1.2
log
@Altered compress to use a 2-byte array buffer rather than 2 chars.
Added a few comments.#
@
text
@d1 3
a3 2
#include <stdio.h>
#include <stdlib.h>
d70 1
a70 1
  fprintf(stderr,"%d>%d>%d\n",sample,ret,prev_val_c);
@


1.1
log
@Initial revision
@
text
@d4 5
d21 2
d24 7
d32 2
d35 4
d40 1
a41 1
/* Initialise compression */
d43 3
d51 3
a53 1
/* Initialise decompression */
d60 3
a62 1
/* Takes a byte and compresses it, which is returned */
d73 3
a75 1
/* Takes two bytes and compresses them into 1 which is returned */
d81 6
@
