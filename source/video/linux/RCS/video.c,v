head	1.11;
access;
symbols;
locks
	iic:1.11; strict;
comment	@ * @;


1.11
date	98.05.07.14.04.44;	author iic;	state Exp;
branches;
next	1.10;

1.10
date	98.05.07.13.40.09;	author iic;	state Exp;
branches;
next	1.9;

1.9
date	98.05.07.13.01.16;	author iic;	state Exp;
branches;
next	1.8;

1.8
date	98.05.06.15.20.25;	author iic;	state Exp;
branches;
next	1.7;

1.7
date	98.05.06.14.58.47;	author skk;	state Exp;
branches;
next	1.6;

1.6
date	98.05.04.12.16.31;	author iic;	state Exp;
branches;
next	1.5;

1.5
date	98.04.30.10.06.07;	author iic;	state Exp;
branches;
next	1.4;

1.4
date	98.04.29.13.41.38;	author iic;	state Exp;
branches;
next	1.3;

1.3
date	98.04.28.13.25.32;	author iic;	state Exp;
branches;
next	1.2;

1.2
date	98.04.28.13.23.41;	author iic;	state Exp;
branches;
next	1.1;

1.1
date	98.04.27.13.44.50;	author iic;	state Exp;
branches;
next	;


desc
@Linux video reception and decompression code
@


1.11
log
@Added restartVideo - Untested
@
text
@/*
  Linux video reception and decompression code
  $Id: video.c,v 1.10 1998/05/07 13:40:09 iic Exp iic $
  $Log: video.c,v $
  Revision 1.10  1998/05/07 13:40:09  iic
  Waaaaaaaaaaaaaaaahhhhhhhhhhhhhhoooooooooooooo!  IT WORKS!

  Revision 1.9  1998/05/07 13:01:16  iic
  Works, but still has loads of debugging stuff (incl CRC)

  Revision 1.8  1998/05/06 15:20:25  iic
  Added CRC checking to Video - not yet tested it though

  Revision 1.7  1998/05/06 14:58:47  skk
  Initial changes to merge with serial.

  Revision 1.6  1998/05/04 12:16:31  iic
  Now ready for testing, will output image to STDOUT as text

  Revision 1.5  1998/04/30 10:06:07  iic
  Fixed ENUM bug.

  Revision 1.4  1998/04/29 13:41:38  iic
  Used data.VIDEO definition in data.h

  Revision 1.3  1998/04/28 13:25:32  iic
  Minor commenting changes.

*/

#include <serial.h>
#include <linux.video.h>
#include <data.h>
#include <control.h>

/*
  Some bit manipulation utilities
*/

int getbit (unsigned char * ptr, unsigned long off)
{
  unsigned int idx, bit;
  idx = (unsigned int) (off / 8);
  bit = 7 - ((unsigned int) (off % 8));
  return (ptr [idx] & (1 << bit)) >> bit;
}

int getval (unsigned char * ptr, unsigned long off, int bits)
{
  int result, i;
  result = 0;
  for (i = 0; i < bits; i++)
    result |= getbit (ptr, off + i) << (bits - i - 1);
  return result;
}

/*
  src is a pointer to an array of unsigned chars which is the output
  of RLEencode.  dst is a pointer to an empty buffer of size dLen.
  RLEdecode will decompress the data into dst, stopping short if it
  is about to exceed the length of the buffer.  If the buffer is too
  long the remaining space may be filled with junk.
 */
  
void RLEdecode(unsigned char * src, unsigned char * dst, int dLen)
{
  int sPtr=0, dPtr=0, x;
  unsigned char count, c;
  while(dPtr<dLen)
    {
      if (getbit(src,sPtr)==0)
	{
	  sPtr++;
	  dst[dPtr]=getval(src,sPtr,4);
	  dPtr++;
	  sPtr+=4;
	}
      else
	{
	  sPtr++;
	  c=getval(src,sPtr,4);
	  sPtr+=4;
	  count=getval(src,sPtr,5);
	  sPtr+=5;
	  for(x=dPtr;(x<dPtr+count+2)&&(x<dLen);x++)
	    {
	      dst[x]=c;
	    }
	  dPtr=x;
	}
    }
}

/* Video Init routine.  Registers video handler with serial interface */

void handleVideo(packet * p);

void initVideo()
{
  registerhandler(VIDEO, (packethandler) handleVideo);
}

#define frameBufferSz 19200

/* Declare buffer for incoming data */

unsigned char incoming[frameBufferSz+1];

/* Declare buffer for XORing data */

unsigned char out[2][frameBufferSz];

void restartVideo()
{
  packet p;
  p.datatype=CONTROL;
  p.length=1;
  p.data=RESTART_VIDEO;
  senddata(&p);
}

/* Video handler */

void handleVideo(packet * p)
{
  int x, y, *a, *b, *c;
  static int current=0, last=1;
  RLEdecode(&(p->data[1]), incoming, frameBufferSz);

  /* If this is the first frame in a sequence then reset the previous frame */
  if (p->data[0]==1)
    for(x=0;x<19200;x++)
      out[last][x]=0;

  /* XOR uncompressed data with previous frame to obtain new image */
#if 0
  a=(int *) incoming;
  b=(int *) out[current];
  c=(int *) out[last];
  for(x=0;x<19200/4;x++)
    {
      b[x]=a[x] ^ c[x];
    }
#endif
  printf("Tag1\n");
  for (x = 0; x < 19200; x++)
    out [current][x] = incoming [x] ^ out [last][x];
  printf("Tag2\n");
  display_image(out[current]);
  printf("Send image to ED's code\n");
  
  /* Reverse what is current and what is last */
  current=1-current;
  last=1-last;
}
@


1.10
log
@Waaaaaaaaaaaaaaaahhhhhhhhhhhhhhoooooooooooooo!  IT WORKS!
@
text
@d3 1
a3 1
  $Id: video.c,v 1.9 1998/05/07 13:01:16 iic Exp iic $
d5 3
d113 9
d134 1
a134 4
  if (p->data[0]==1)
    printf("Video: New Sequence\n");
  else
    printf("Video: Ongoing Sequence\n");
@


1.9
log
@Works, but still has loads of debugging stuff (incl CRC)
@
text
@d3 1
a3 1
  $Id: video.c,v 1.8 1998/05/06 15:20:25 iic Exp iic $
d5 3
d104 1
a104 1
unsigned char incoming[frameBufferSz+2];
d114 1
a114 2
  int x, y, *a, *b, *c, tcrc;
  unsigned char crc, crc2;
d116 1
a116 14
  RLEdecode(&(p->data[2]), incoming, frameBufferSz);
  /* Determine CRC */
  crc=p->data[1];
  crc2=0;
  tcrc=0;
  printf("Video: CRC: %d\n",crc);

  /****** TRANSMISSION CRC CODE *******/

  for(x=0;x<p->length;x++)
    tcrc+=p->data[x];
  printf("Transmission CRC: %d\n",crc);

  /****** END TRANSMISSION CRC CODE *******/
d136 1
a136 8
  for(x=0;x<19200;x++)
    crc2+=b[x];
  printf("Calculated CRC: %d\n",crc2);
  if(crc!=crc2)
    {
      printf("Video: Wrong CRC - Requesting retransmit\n");
      /**** INSERT CODE TO SEND RESTART_VIDEO MESSAGE TO BOARD HERE ****/
    }
d139 3
a141 8
  
  /* For debugging, output picture as text */
  for (y=0;y<120;y++)
    {
      for(x=0;x<160;x++)
	putchar(out[current][y*160+x]+65);
      printf("\n");
    }
@


1.8
log
@Added CRC checking to Video - not yet tested it though
@
text
@d3 1
a3 1
  $Id: video.c,v 1.7 1998/05/06 14:58:47 skk Exp iic $
d5 3
d111 2
a112 1
  int x, y, *a, *b, *c, crc;
d116 3
a118 1
  crc=p.data[1];
d120 9
d133 4
a144 1
      crc-=b[x]; /* Calculate CRC */
d147 4
a150 1
  if(crc!=0)
d155 5
a159 1
  else
d161 3
a163 10
      for (x = 0; x < 19200; x++)
	out [current][x] = incoming [x] ^ out [last][x];
      
      /* For debugging, output picture as text */
      for (y=0;y<120;y++)
	{
	  for(x=0;x<160;x++)
	    putchar(out[current][y*160+x]+65);
	  printf("\n");
	}
@


1.7
log
@Initial changes to merge with serial.
@
text
@d3 1
a3 1
  $Id: video.c,v 1.6 1998/05/04 12:16:31 iic Exp skk $
d5 3
d25 1
d98 1
a98 1
unsigned char incoming[frameBufferSz+1];
d108 1
a108 1
  int x, y, *a, *b, *c;
d110 4
a113 1
  RLEdecode(&(p->data[1]), incoming, frameBufferSz);
a118 1
  printf("out[%d] = incoming ^ out[%d]\n",current,last);
d126 1
d129 1
a129 5
  for (x = 0; x < 19200; x++)
    out [current][x] = incoming [x] ^ out [last][x];

  /* For debugging, output picture as text */
  for (y=0;y<120;y++)
d131 15
a145 3
      for(x=0;x<160;x++)
	putchar(out[current][y*160+x]+65);
      printf("\n");
a147 1

@


1.6
log
@Now ready for testing, will output image to STDOUT as text
@
text
@d3 1
a3 1
  $Id: video.c,v 1.5 1998/04/30 10:06:07 iic Exp iic $
d5 3
d83 1
a83 1
void handleVideo(packet p);
d102 1
a102 1
void handleVideo(packet p)
d104 3
a106 2
  int x, y, *a, *b, *c, current=0, last=1;
  RLEdecode(p.data+1, incoming, frameBufferSz);
d108 1
a108 1
  if (p.data[0]==1)
d112 2
d121 3
@


1.5
log
@Fixed ENUM bug.
@
text
@d3 1
a3 1
  $Id: video.c,v 1.4 1998/04/29 13:41:38 iic Exp iic $
d5 3
d49 1
a49 1
int RLEdecode(unsigned char * src, unsigned char * dst, int dLen)
a75 3
  if (dPtr>maxL)
    dPtr=0;
  return dPtr;
d84 1
a84 1
  registerhandler(VIDEO, p);
d87 2
d91 1
a91 1
unsigned char incoming[19200];
d95 1
a95 1
unsigned char out[2][19200];
d101 2
a102 2
  int x, *a, *b, *c, current=0, last=1;
  RLEdecode(p.data+1, incoming, 19200);
d115 9
a123 1
  /* Unfinished from here */
@


1.4
log
@Used data.VIDEO definition in data.h
@
text
@d3 1
a3 1
  $Id: video.c,v 1.3 1998/04/28 13:25:32 iic Exp iic $
d5 3
d84 1
a84 1
  registerhandler(data.VIDEO, p);
@


1.3
log
@Minor commenting changes.
@
text
@d3 5
a7 2
  $Id: video.c,v 1.2 1998/04/28 13:23:41 iic Exp iic $
  $Log$
d12 1
a12 2

#define VIDEO_DATATYPE 162
d81 1
a81 1
  registerhandler(VIDEO_DATATYPE, p);
@


1.2
log
@Wrote most if handleVideo, have yet to sort out XPM conversion
@
text
@d3 2
a4 1
  $Id: video.c,v 1.1 1998/04/27 13:44:50 iic Exp iic $
@


1.1
log
@Initial revision
@
text
@d3 10
a12 1
  $Id$
d34 4
a37 6
  of RLEencode.  dst is a pointer to an empty buffer of size maxL.
  sLen is the number of compressed **bits** in src as given by
  the RLEencode function.
  RLEdecode will decompress the data into dst, and will return the
  size of the data in dst in bytes, or it will return 0 if this size
  exceeded maxL and RLEdecode aborted the decompression.
d40 1
a40 1
int RLEdecode(unsigned char * src, unsigned char * dst, int sLen, int maxL)
d44 1
a44 1
  while((sPtr<sLen)&&(dPtr<=maxL))
d60 1
a60 1
	  for(x=dPtr;x<dPtr+count+2;x++)
d70 42
@
