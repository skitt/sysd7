head	1.4;
access;
symbols;
locks
	skk:1.4; strict;
comment	@ * @;


1.4
date	98.04.23.13.31.28;	author skk;	state Exp;
branches;
next	1.3;

1.3
date	98.04.23.09.32.43;	author skk;	state Exp;
branches;
next	1.2;

1.2
date	98.04.23.08.53.25;	author skk;	state Exp;
branches;
next	1.1;

1.1
date	98.04.22.14.37.34;	author skk;	state Exp;
branches;
next	;


desc
@Quickcam test program
@


1.4
log
@Added XPM features.
@
text
@/* Quickcam test program  - outputs an XPM to the terminal */

/* $Id$ */

#include <m68kboard.h>
#include <quickcam.h>

void puts (char *);

unsigned char buffer [19200];

void main (void)
{
  int errno;
  int i, j;
  unsigned char c;

  puts ("Initialising camera\n\r");
  if ((errno = QC_init ()) == QC_SUCCESS)
    {
      puts ("Grabbing frame\n\r");
      if ((errno = QC_grabframe (buffer)) == QC_SUCCESS)
	{
	  puts ("Received frame (XPM):\n\r");
	  puts ("/* XPM */\n\r");
	  puts ("static char * xpm = {\n\r");
	  puts ("\"160 120 16 1\", \"0 c #000000\", \"1 c #111111\", ");
	  puts ("\"2 c #222222\", \"3 c #333333\", \"4 c #444444\", ");
	  puts ("\"5 c #555555\", \"6 c #666666\", \"7 c #777777\", ");
	  puts ("\"8 c #888888\", \"9 c #999999\", \"A c #aaaaaa\", ");
	  puts ("\"B c #bbbbbb\", \"C c #cccccc\", \"D c #dddddd\", ");
	  puts ("\"E c #eeeeee\", \"F c #ffffff\",\n\r");
	  for (j = 0; j < 120; j++)
	    {
	      mon_putc ('\"');
	      for (i = 0; i < 160; i++)
		{
		  c = buffer [160 * j + i];
		  if (c != 0)
		    c = 16 - c;
		  if (c < 10)
		    mon_putc (c + '0');
		  else
		    mon_putc (c + 'A' - 10);
		}
	      puts ("\",\n\r");
	    }
	  puts ("} ;\n\r");
	}
    }
  if (errno != QC_SUCCESS)
    {
      switch (errno)
	{
	case QC_BAD_RESPONSE:
	  puts ("Bad response from camera\n\r");
	  break;
	case QC_TIMEOUT:
	  puts ("Camera timed out\n\r");
	  break;
	}
    }
}

void puts (char * string)
{
  while (*string)
    {
      mon_putc (*string);
      string++;
    }
}
@


1.3
log
@Added init message.
@
text
@d1 3
a3 1
/* Quickcam test program */
d8 3
a10 8
void puts (char * string)
{
  while (*string)
    {
      mon_putc (*string);
      string++;
    }
}
a13 1
  unsigned char buffer [160][120];
d18 1
a18 1
  puts ("Initialising camera\n");
d21 2
a22 3
      puts ("Grabbing frame\n");
      if ((errno = QC_grabframe ((unsigned char *) buffer)) ==
	  QC_SUCCESS)
d24 10
a33 2
	  puts ("Received frame:\n");
	  for (j = 0; j < 24; j++)
d35 2
a36 1
	      for (i = 0; i < 80; i++)
d38 1
a38 1
		  c = buffer [i][j];
d46 1
d48 1
d56 1
a56 1
	  puts ("Bad response from camera\n");
d59 1
a59 1
	  puts ("Camera timed out\n");
d62 9
@


1.2
log
@Corrected image display (ie added interpretation and value correction for
grayscale).
@
text
@d21 2
a22 1
  
@


1.1
log
@Initial revision
@
text
@d20 1
d32 9
a40 1
		mon_putc (buffer [i][j]);
@
