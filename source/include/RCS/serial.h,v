head	1.7;
access;
symbols;
locks
	skk:1.7; strict;
comment	@ * @;


1.7
date	98.04.30.08.28.20;	author skk;	state Exp;
branches;
next	1.6;

1.6
date	98.04.29.14.53.57;	author skk;	state Exp;
branches;
next	1.5;

1.5
date	98.04.29.13.32.08;	author skk;	state Exp;
branches;
next	1.4;

1.4
date	98.04.29.13.24.42;	author skk;	state Exp;
branches;
next	1.3;

1.3
date	98.04.27.16.13.02;	author skk;	state Exp;
branches;
next	1.2;

1.2
date	98.04.27.15.28.48;	author skk;	state Exp;
branches;
next	1.1;

1.1
date	98.04.27.15.07.01;	author skk;	state Exp;
branches;
next	;


desc
@Corrected function parameter for registerhandler () (to be revised again).
@


1.7
log
@Added init/shutdown functions.
@
text
@#ifndef __SERIAL_H__
#define __SERIAL_H__

/* Serial interface definitions
   $Id: serial.h,v 1.6 1998/04/29 14:53:57 skk Exp skk $
   $Log: serial.h,v $
   Revision 1.6  1998/04/29 14:53:57  skk
   Added ping function.

 */

/* External packet structure */
typedef struct
{
  unsigned char datatype;
  unsigned int length;
  unsigned char * data;
} packet;

/* Packet handler - this is a pointer to a function which takes a
   pointer to a packet and returns nothing */
typedef void (* packethandler) (packet *);

/* Initialises the serial stuff */
int serialinit (void);

/* Shuts the serial down */
int serialclose (void);

/* Queues a packet to be sent across the serial line */
/* Input: pointer to a packet */
/* Output: 0 for success, errno-type code otherwise (include
   <errno.h>) */
int senddata (packet *);

/* Registers a data handler for a given data type */
/* Input: datatype to be handled (can be DEFAULT), pointer to a
   function taking a packet as input */
/* Output: 0 for success */
int registerhandler (unsigned char, packethandler);

/* Removes the data handler for the given type; note that a default
   handler is always available (it discards everything) and will be
   reinstated if the default is removed */
/* Input: datatype to be removed */
int unregisterhandler (unsigned char);

/* Returns 1 if the opposite communicator is alive, 0 if it isn't */
int ping (void);

#endif /* ndef __SERIAL_H__ */
@


1.6
log
@Added ping function.
@
text
@d5 5
a9 2
   $Id: serial.h,v 1.5 1998/04/29 13:32:08 skk Exp skk $
   $Log$
d24 6
d48 1
a48 1
/* Returns 1 if the SO is alive, 0 if it isn't */
@


1.5
log
@Added unregister function.
@
text
@d5 2
a6 1
   $Id: serial.h,v 1.4 1998/04/29 13:24:42 skk Exp skk $
d38 3
@


1.4
log
@Added packet handler type, changed some definitions.
@
text
@d5 1
a5 1
   $Id: serial.h,v 1.3 1998/04/27 16:13:02 skk Exp skk $
d31 6
@


1.3
log
@Unclosed comment removed.
@
text
@d5 1
a5 1
   $Id: serial.h,v 1.2 1998/04/27 15:28:48 skk Exp skk $
d16 4
d21 1
a21 1
/* Input: packet (with CRC = 0) */
d24 1
a24 1
int senddata (packet);
d30 1
a30 1
int registerhandler (unsigned char, void *);
@


1.2
log
@Made packet length dynamic.
@
text
@d5 1
a5 1
   $Id$
a20 2

/* Transmits a buffer d
@


1.1
log
@Initial revision
@
text
@d4 3
a6 1
/* Serial interface definitions */
d8 1
a8 4
/* Packet size */
#define PACKETSIZE 512

/* Packet structure */
d12 2
a13 2
  unsigned char data [PACKETSIZE - 2];
  unsigned char crc;
d21 2
@
